<ac:structured-macro ac:name="info" ac:schema-version="1"><ac:rich-text-body><p>This page has been generated with a tool.</p></ac:rich-text-body></ac:structured-macro><p><a href="https://mermaid.js.org/">Mermaid</a>  is a simple and powerful diagramming and charting tool that uses a markdown-like syntax.</p><p>You can include Mermaid diagrams in your documents to create visual representations of systems, processes, and relationships.</p><p>There are two options for rendering Mermaid diagrams in Confluence:</p><ol><li><p>Inline the Mermaid diagrams directly in the Confluence page. This requires installing the <a href="https://marketplace.atlassian.com/apps/1211438/markdown-html-plantuml-latex-diagrams-open-api-mermaid?hosting=cloud&amp;tab=overview">Markdown HTML PlantUML LaTeX Diagrams Open API Mermaid</a> plugin into your Confluence account.</p></li><li><p>Render the Mermaid diagrams using the <a href="https://docs.kroki.io/kroki/architecture/">Kroki</a> server. This option does not require installing any additional plugins in Confluence.  By default, the public server at <a href="https://kroki.io">https://kroki.io</a> is used. You can choose to <a href="https://docs.kroki.io/kroki/setup/install/">install your a private copy of the Kroki server</a> in your environment and set the <code>KROKI_SERVER_URL</code> environment variable to use yours instead.</p></li></ol><p/><h1>Example Mermaid Diagrams</h1><h2>Class diagrams</h2><p>Class diagrams are a type of UML diagram that visually represent the relationships between classes in a software system. They show the classes, their attributes, and the methods they contain, as well as the relationships between them, such as inheritance, association, and aggregation. Class diagrams are used to model the static structure of a system, providing a blueprint for its implementation.</p><ac:structured-macro ac:name="macro-diagram" ac:schema-version="1" ac:data-layout="default" ac:local-id="UUID" ac:macro-id="UUID"><ac:parameter ac:name="sourceType">MacroBody</ac:parameter><ac:parameter ac:name="attachmentPageId"/><ac:parameter ac:name="syntax">Mermaid</ac:parameter><ac:parameter ac:name="attachmentId"/><ac:parameter ac:name="url"/><ac:plain-text-body><![CDATA[classDiagram
Entity <|-- Product
Entity <|-- Customer
Entity <|-- Vendor
Vendor <|-- Store
Entity <|-- Project]]></ac:plain-text-body></ac:structured-macro><h2>Pie charts</h2><p>Pie charts are a type of chart that displays data as slices of a circle, where the size of each slice is proportional to the value it represents.  They are useful for visualizing the relative proportions of different categories within a dataset.  This example shows the relative time spent looking for a movie versus watching it on Netflix.</p><ac:structured-macro ac:name="macro-diagram" ac:schema-version="1" ac:data-layout="default" ac:local-id="UUID" ac:macro-id="UUID"><ac:parameter ac:name="sourceType">MacroBody</ac:parameter><ac:parameter ac:name="attachmentPageId"/><ac:parameter ac:name="syntax">Mermaid</ac:parameter><ac:parameter ac:name="attachmentId"/><ac:parameter ac:name="url"/><ac:plain-text-body><![CDATA[pie title NETFLIX
    "Time spent looking for movie" : 90
    "Time spent watching it" : 10]]></ac:plain-text-body></ac:structured-macro><h2>Sequence diagrams</h2><p>UML Sequence diagrams are a type of interaction diagram that shows how objects in a system interact with each other over time. They are used to model the dynamic behavior of a system, showing the sequence of messages that are exchanged between objects. Sequence diagrams are often used to model the flow of control in a system, such as the steps involved in processing a request or handling an event.</p><ac:structured-macro ac:name="macro-diagram" ac:schema-version="1" ac:data-layout="default" ac:local-id="UUID" ac:macro-id="UUID"><ac:parameter ac:name="sourceType">MacroBody</ac:parameter><ac:parameter ac:name="attachmentPageId"/><ac:parameter ac:name="syntax">Mermaid</ac:parameter><ac:parameter ac:name="attachmentId"/><ac:parameter ac:name="url"/><ac:plain-text-body><![CDATA[sequenceDiagram
    Alice ->> Bob: Hello Bob, how are you?
    Bob-->>John: How about you John?
    Bob--x Alice: I am good thanks!
    Bob-x John: I am good thanks!
    Note right of John: Bob thinks a long<br/>long time, so long<br/>that the text does<br/>not fit on a row.

    Bob-->Alice: Checking with John...
    Alice->John: Yes... John, how are you?]]></ac:plain-text-body></ac:structured-macro><h2>Mindmaps</h2><p>Mindmaps are a visual representation of hierarchical information, using branches radiating from a central node to represent relationships between concepts. They are often used for brainstorming, note-taking, and knowledge organization, allowing users to visually map out ideas and connections. Mindmaps can be created using pen and paper or specialized software tools like Mermaid.</p><ac:structured-macro ac:name="macro-diagram" ac:schema-version="1" ac:data-layout="default" ac:local-id="UUID" ac:macro-id="UUID"><ac:parameter ac:name="sourceType">MacroBody</ac:parameter><ac:parameter ac:name="attachmentPageId"/><ac:parameter ac:name="syntax">Mermaid</ac:parameter><ac:parameter ac:name="attachmentId"/><ac:parameter ac:name="url"/><ac:plain-text-body><![CDATA[mindmap
  root((mindmap))
    Origins
      Long history
      ::icon(fa fa-book)
      Popularisation
        British popular psychology author Tony Buzan
    Research
      On effectiveness<br/>and features
      On Automatic creation
        Uses
            Creative techniques
            Strategic planning
            Argument mapping
    Tools
      Pen and paper
      Mermaid]]></ac:plain-text-body></ac:structured-macro><p>A timeline is a type of diagram that visually represents events and activities over a period of time. It is used to illustrate the sequence of events, milestones, or tasks in a project or process, providing a clear overview of the timeline and dependencies.</p><ac:structured-macro ac:name="macro-diagram" ac:schema-version="1" ac:data-layout="default" ac:local-id="UUID" ac:macro-id="UUID"><ac:parameter ac:name="sourceType">MacroBody</ac:parameter><ac:parameter ac:name="attachmentPageId"/><ac:parameter ac:name="syntax">Mermaid</ac:parameter><ac:parameter ac:name="attachmentId"/><ac:parameter ac:name="url"/><ac:plain-text-body><![CDATA[%%{init: { 'logLevel': 'debug', 'theme': 'forest' } }%%
    timeline
        title History of Social Media Platform
          2002 : LinkedIn
          2004 : Facebook : Google
          2005 : Youtube
          2006 : Twitter
          2007 : Tumblr
          2008 : Instagram
          2010 : Pinterest]]></ac:plain-text-body></ac:structured-macro><p>Quadrant diagrams are a visual representation of a matrix with four quadrants, each representing a different combination of two variables. They are often used for prioritization, decision-making, and problem-solving.</p><p>A quadrant diagram typically has two axes, each representing a different variable. The axes are usually labeled with opposite ends of a spectrum, such as "Important" vs. "Not Important" or "Urgent" vs. "Not Urgent". The four quadrants are then defined by the intersection of these axes.</p><ac:structured-macro ac:name="macro-diagram" ac:schema-version="1" ac:data-layout="default" ac:local-id="UUID" ac:macro-id="UUID"><ac:parameter ac:name="sourceType">MacroBody</ac:parameter><ac:parameter ac:name="attachmentPageId"/><ac:parameter ac:name="syntax">Mermaid</ac:parameter><ac:parameter ac:name="attachmentId"/><ac:parameter ac:name="url"/><ac:plain-text-body><![CDATA[
%%{init: {"quadrantChart": {"chartWidth": 400, "chartHeight": 400}, "themeVariables": {"quadrant1TextFill": "#ff0000"} }}%%
quadrantChart
  x-axis Urgent --> Not Urgent
  y-axis Not Important --> "Important ❤"
  quadrant-1 Plan
  quadrant-2 Do
  quadrant-3 Delegate
  quadrant-4 Delete]]></ac:plain-text-body></ac:structured-macro>